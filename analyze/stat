#!/bin/bash
links_stat(){
cat $router <(echo "#") $links | python <(
cat << "EOF"
router_ip={}
total_ip={}
r2r_cnt=0
cnt=0

while True:
  line=raw_input()
  if line[0] == '#':
    break
  router_ip[line.strip('\n')] = ""

while True:
  try:
    line=raw_input()
  except:
    break
  fields=line.split(' ')
  if not total_ip.has_key(fields[0]):
    total_ip[fields[0]]=[1,0]
  else:
    total_ip[fields[0]][0]+=1
  if not total_ip.has_key(fields[1]):
    total_ip[fields[1]]=[0,1]
  else:
    total_ip[fields[1]][1]+=1

  if router_ip.has_key(fields[1]):
    r2r_cnt+=1
  cnt+=1

total=[ [0,-1],[0,-1] ] #(in,out)x(sum,max)-->R
router=[ -1,[0,-1] ] #omitted (in,sum)
host=-1
for ip in total_ip.keys():
  o=total_ip[ip][0]
  i=total_ip[ip][1]
  total[0][0]+=o
  if o > total[0][1]:
    total[0][1] = o
  total[1][0]+=i
  if i > total[1][1]:
    total[1][1] = i
  if router_ip.has_key(ip):
    if o > router[0]:
      router[0] = o
      print "o: "+str(ip)+","+str(o)
    router[1][0]+=i
    if i > router[1][1]:
      router[1][1] = i
  else:
    if i > host:
      host=i
      print "i: "+str(ip)+","+str(i)

print "#TON,NOL,NON" #type of node, number of links, number of nodes.
print "B,"+str(cnt)+","+str(len(total_ip))
print "R,"+str(r2r_cnt)+","+str(len(router_ip))
print "#TOD,BSOD,BMAX" #type of degree, sum of degres, max
print "I,"+str(total[1][0])+","+str(total[1][1])
print "O,"+str(total[0][0])+","+str(total[0][1])
print "#TOD,RSOD,RMAX"
print "I,"+str(router[1][0])+","+str(router[1][1])
print "O,"+str(total[0][0])+","+str(router[0])
print "#TOD,HMAX"
print "I,"+str(host)
EOF
)
}

router_stat(){
edge=$1
cat $edge | python <(
cat << "EOF"
total_ip={}
cnt=0
r2r_cnt=0

while True:
  try:
    line=raw_input()
  except:
    break
  fields=line.split(' ')
  if not total_ip.has_key(fields[0]):
    total_ip[fields[0]]=[1,0]
  else:
    total_ip[fields[0]][0]+=1
  if not total_ip.has_key(fields[1]):
    total_ip[fields[1]]=[0,1]
  else:
    total_ip[fields[1]][1]+=1
  if not "." in fields[1]:
    r2r_cnt+=1
  cnt+=1

total=[ [0,-1],[0,-1] ] #(in,out)x(sum,max)-->R
router=[ -1,[0,-1] ] #omitted (in,sum)
host=-1
for ip in total_ip.keys():
  o=total_ip[ip][0]
  i=total_ip[ip][1]
  total[0][0]+=o
  if o > total[0][1]:
    total[0][1] = o
  total[1][0]+=i
  if i > total[1][1]:
    total[1][1] = i
  if not "." in ip:
    if o > router[0]:
      router[0] = o
      print "o: "+str(ip)+","+str(o)
    router[1][0]+=i
    if i > router[1][1]:
      router[1][1] = i
  else:
    if i > host:
      host=i
      print "i: "+str(ip)+","+str(i)

print "#TON,NOL,NON" #type of node, number of links, number of nodes.
print "B,"+str(cnt)+","+str(len(total_ip))
print "R,"+str(r2r_cnt)
print "#TOD,BSOD,BMAX" #type of degree, sum of degres, max
print "I,"+str(total[1][0])+","+str(total[1][1])
print "O,"+str(total[0][0])+","+str(total[0][1])
print "#TOD,RSOD,RMAX"
print "I,"+str(router[1][0])+","+str(router[1][1])
print "O,"+str(total[0][0])+","+str(router[0])
print "#TOD,HMAX"
print "I,"+str(host)
EOF
)
}

#links=/ftp/results/201709.month
#router=/ftp/disk/caidahk201709.router
#edge=/ftp/disk/201709.edge
test $# -ne 3 && exit
links=$1
router=$2
edge=$3

links_stat $router $links
router_stat $edge
